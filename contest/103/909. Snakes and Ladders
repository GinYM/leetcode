class Solution {
    public int snakesAndLadders(int[][] board) {
        Queue<int[]> queue = new LinkedList<int[]>();
        queue.offer(new int[]{1,0});
        int n = board.length;
        int store[] = new int[n*n+1];
        Arrays.fill(store, Integer.MAX_VALUE);
        store[1] = 1;
        while(queue.isEmpty() == false){
            int[] num = queue.poll();
            
            for(int j = num[0]+1;j<=Math.min(n*n, num[0]+6);j++){
                int row = n-1-(j-1)/n;
                int col = 0;
                if((n-1-row)%2 == 0){
                    col = (j-1)%n;
                }else{
                    col = n-1-(j-1)%n;
                }
                
                if(board[row][col] == -1){
                    if(num[1] + 1 < store[j]){
                        store[j] = num[1]+1;
                        queue.offer(new int[]{j, num[1]+1});
                        if(j == n*n) return num[1]+1;
                    }
                }else{
                    if(num[1] + 1 < store[board[row][col]]){
                        store[board[row][col]] = num[1]+1;
                        queue.offer(new int[]{board[row][col], num[1]+1});
                        if(board[row][col] == n*n) return num[1]+1;
                    }
                }
            }
        }
        return -1;
        
    }
    
    
}
