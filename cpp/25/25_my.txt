/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        if(k == 1)
        {
            return head;
        }
        ListNode dump = ListNode(0);
        dump.next = head;
        ListNode*cur = &dump;
        ListNode * nextk = NULL;
        ListNode* tract;
        ListNode*start;
        ListNode*third;
        ListNode*second;
        ListNode* first;
        while(cur!=NULL && cur->next != NULL)
        {
            nextk=NULL;
            nextk=cur;
            bool isEnd = false;
            for(int i = 0;i<k;i++)
            {
                if(nextk==NULL)
                {
                    isEnd = true;
                    break;
                }
                else
                {
                    nextk = nextk->next;
                }
                if(nextk == NULL)
                {
                    isEnd=true;
                    break;
                }
            }
            if(isEnd == true)
            {
                break;
            }
            nextk = nextk->next;
            first = cur->next;
            second = first->next;
            third = second->next;
            start = cur->next;
            for(int i = 0;i<k-1;i++)
            {
                second->next=first;
                
                first=second;
                second=third;
                if(third!=NULL)
                    third=third->next;
                
            }
            start->next=second;
            cur->next=first;
            cur=start;
        }
        return dump.next;
    }
};
