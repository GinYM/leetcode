class Solution {
public:
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        vector<vector<int> >result;
        sort(candidates.begin(),candidates.end());
        vector<int>prev;
        dfs(candidates,0,target,prev,result);
        return result;
    }
private:
    void dfs(vector<int>& candidates,int idx,int target,vector<int>& prev,vector<vector<int> > &result)
    {
        if(target == 0)
        {
            result.push_back(prev);
            return;
        }
        unordered_set<int> hash;
        for(int i = idx;i<candidates.size();i++)
        {
            if(candidates[i] <= target && hash.find(candidates[i]) == hash.end())
            {
                hash.insert(candidates[i]);
                prev.push_back(candidates[i]);
                dfs(candidates,i+1,target-candidates[i],prev,result);
                prev.pop_back();
            }
            else if(candidates[i] > target)
                break;
        }
    }
};
