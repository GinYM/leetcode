class TrieNode{
public:
    TrieNode*children[26];
    bool isKey;
    TrieNode(bool key = false)
    {
        isKey = key;
        memset(children,0,sizeof(children));
    }
};


class Trie {
public:
    /** Initialize your data structure here. */
    TrieNode *root;
    Trie() {
        root = new TrieNode();
    }
    
    /** Inserts a word into the trie. */
    void insert(string word) {
        TrieNode* cur = root;
        for(int i = 0;i<word.size();i++)
        {
            if(cur->children[word[i]-'a'] == NULL)
            {
                cur->children[word[i]-'a'] = new TrieNode(i==word.size());
            }
            
            if(i==word.size()-1)
                cur->children[word[i]-'a']->isKey = true;
            
            cur = cur->children[word[i]-'a'];
        }
    }
    
    /** Returns if the word is in the trie. */
    bool search(string word) {
        TrieNode* cur = root;
        for(int i = 0;i<word.size();i++)
        {
            if(cur->children[word[i]-'a']==NULL)
                return false;
            cur = cur->children[word[i]-'a'];
        }
            
        return cur->isKey;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        TrieNode*cur = root;
        for(int i = 0;i<prefix.size();i++)
        {
            if(cur->children[prefix[i]-'a'] == NULL)
                return false;
            cur = cur->children[prefix[i]-'a'];
        }
        return true;
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * bool param_2 = obj.search(word);
 * bool param_3 = obj.startsWith(prefix);
 */
