/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    vector<Interval> insert(vector<Interval>& intervals, Interval newInterval) {
        int idx = 0;
        binary_search(intervals,newInterval,idx,0,intervals.size()-1);
        
        vector<Interval>result;
        if(intervals.size()==0)
        {
            result.push_back(newInterval);
            return result;
        }
        int start; 
        int end; 
        if(idx == -1)
        {
            start = newInterval.start;
            end = newInterval.end;
        }
        else
        {
            start = intervals[0].start;
            end = intervals[0].end;
        }
        
        if(idx == 0 )
        {
            if(newInterval.start<=end)
            {
                end = max(end,newInterval.end);
            }
            else
            {
                result.push_back(Interval(start,end));
                start = newInterval.start;
                end = newInterval.end;
            }
        }
            
        for(int i = idx==-1?0:1;i<intervals.size();i++)
        {
            if(intervals[i].start<=end)
            {
                end = max(end,intervals[i].end);
            }
            else
            {
                result.push_back(Interval(start,end));
                start = intervals[i].start;
                end = intervals[i].end;
            }
            if(idx == i && idx!=-1)
            {
                if(newInterval.start<=end)
                {
                    end = max(end,newInterval.end);
                }
                else
                {
                    result.push_back(Interval(start,end));
                    start = newInterval.start;
                    end = newInterval.end;
                }
            }
        }
        result.push_back(Interval(start,end));
        return result;
    }
private:
    void binary_search(vector<Interval>& intervals,Interval newInterval,int & idx,int start,int end)
    {
        if(end<start)
        {
            idx = end;
            return;
        }
        else if(end == start)
        {
            if(newInterval.start >=intervals[start].start)
            {
                idx = start;
                return;
            }
            else
            {
                idx = start-1;
                return;
            }
                
        }
        int mid = (start+end)/2;
        if(intervals[mid].start > newInterval.start )
        {
            
            binary_search(intervals,newInterval,idx,start,mid-1);
        }
        else if(intervals[mid].start<newInterval.start)
        {
            
            binary_search(intervals,newInterval,idx,mid+1,end);
        }
        else
        {
            idx = mid;
            return;
        }
    }
};
