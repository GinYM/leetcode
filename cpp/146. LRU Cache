class LRUCache {
public:
    struct Node{
        Node* next;
        Node* prev;
        int key;
        int value;
        Node(int k, int v){
            key = k;
            value =v;
            next = NULL;
            prev = NULL;
        }
    };
    int capacity;
    unordered_map<int, Node*> mymap;
    Node* head;
    Node* tail;
    LRUCache(int capacity) {
        this->capacity = capacity;
        mymap = unordered_map<int, Node*>();
        head = new Node(-1,-1);
        tail = new Node(-1,-1);
        head->next = tail;
        tail->prev = head;
    }
    
    void movefront(Node *node){
        node->next->prev = node->prev;
        node->prev->next = node->next;
        
        node->next=head->next;
        head->next->prev=node;
        node->prev=head;
        head->next=node;
    }
    
    int get(int key) {
        if(mymap.find(key) == mymap.end()){
            return -1;
        }
        movefront(mymap[key]);
        return mymap[key]->value;
    }
    
    void put(int key, int value) {
        if(mymap.find(key) != mymap.end()){
            mymap[key]->value = value;
            movefront(mymap[key]);
        }else{
            if(mymap.size() == capacity){
                Node* last = tail->prev;
                mymap.erase(last->key);
                tail->prev = last->prev;
                last->prev->next = tail;
            }
            
            Node *node = new Node(key, value);
            mymap[key] = node;
            node->next = head->next;
            head->next->prev=node;
            node->prev = head;
            head->next=node;
            
        }
    }
};

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
