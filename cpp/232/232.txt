class MyQueue {
public:
    /** Initialize your data structure here. */
    stack<int> mystack;
    MyQueue() {
        
    }
    
    /** Push element x to the back of queue. */
    void push(int x) {
        mystack.push(x);
    }
    
    /** Removes the element from in front of queue and returns that element. */
    int pop() {
        stack<int> tmp_stack;
        int i = mystack.size()-1;
        int record;
        int tmp;
        while(i--)
        {
            tmp = mystack.top();
            tmp_stack.push(tmp);
            mystack.pop();
        }
        record = mystack.top();
        mystack.pop();
        while(!tmp_stack.empty())
        {
            tmp = tmp_stack.top();
            tmp_stack.pop();
            mystack.push(tmp);
        }
        return record;
    }
    
    /** Get the front element. */
    int peek() {
        stack<int> tmp_stack;
        int i = mystack.size()-1;
        int record;
        int tmp;
        while(i--)
        {
            tmp = mystack.top();
            tmp_stack.push(tmp);
            mystack.pop();
        }
        record = mystack.top();
        mystack.pop();
        tmp_stack.push(record);
        while(!tmp_stack.empty())
        {
            tmp = tmp_stack.top();
            tmp_stack.pop();
            mystack.push(tmp);
        }
        return record;
    }
    
    /** Returns whether the queue is empty. */
    bool empty() {
        return mystack.empty();
    }
};

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue obj = new MyQueue();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.peek();
 * bool param_4 = obj.empty();
 */