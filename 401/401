class Solution {
public:
    vector<string> readBinaryWatch(int num) {
        int convert[10];
        vector<string>result;
        int store[10];
        memset(store,0,sizeof(store));
        for(int i = 0;i<=3;i++)
        {
            convert[i] = pow(2,3-i);
            
        }
        for(int i = 4;i<10;i++)
        {
            
            convert[i]=pow(2,5-(i-4));
            
        }
        dfs(result,store,convert,num,0,0);
        
        return result;
    }
public:
    void dfs(vector<string>&result,int*store,int*convert,int num,int cur_num,int idx)
    {
        
        if(cur_num == num)
        {
            int hour=0,minute=0;
            for(int i = 0;i<=3;i++)
            {
                hour+=store[i]*convert[i];
            }
            for(int i = 4;i<10;i++)
            {
                minute+=store[i]*convert[i];
            }
            if(hour>11)
                return;
            if(minute>59)
                return;
            string s = "";
            while(hour!=0)
            {
                s = char('0'+hour%10)+s;
                hour/=10;
            }
            if(s == "")
                s = "0";
            s+=":";
            s+=char((minute/10)%10+'0');
            s+=char('0'+minute%10);
            result.push_back(s);
            return;
        }
        else
        {
            if(idx>=10)
                return;
            if(9-idx+1<num-cur_num)
                return;
            for(int i=idx;i<10;i++)
            {
                
                store[i]=1;
                dfs(result,store,convert,num,cur_num+1,i+1);
                store[i]=0;
            }
        }
        
    }
};
