class Solution {
    public int findShortestSubArray(int[] nums) {
        Map<Integer, Integer> start = new HashMap<Integer, Integer>();
        Map<Integer, Integer> end = new HashMap<Integer, Integer>();
        Map<Integer, Integer> count = new HashMap<Integer, Integer>();
        int maxFreq = 0;
        for(int i = 0;i<nums.length;i++){
            int n = nums[i];
            count.put(n, count.getOrDefault(n, 0)+1);
            if(start.containsKey(n) == false){
                start.put(n, i);
            }
            end.put(n, i);
            maxFreq = Math.max(count.get(n), maxFreq);
        }
        int result = Integer.MAX_VALUE;
        for(int key : count.keySet()){
            if(count.get(key) == maxFreq){
                result = Math.min(end.get(key)-start.get(key)+1, result);
            }
        }
        return result;
    }
}
