class MyCircularDeque {
    public int size;
    public int capacity;
    class Node{
        public Node next;
        public Node prev;
        public int val;
        public Node(int val){
            this.val = val;
            next = null;
            prev = null;
        }
        public Node(){
            this.val = 0;
            next = null;
            prev = null;
        }
    };
    public Node head;
    public Node tail;
    /** Initialize your data structure here. Set the size of the deque to be k. */
    public MyCircularDeque(int k) {
        size = 0;
        capacity = k;
        head= new Node();
        tail = head;
        tail.next = head;
        head.prev = head;
    }
    
    /** Adds an item at the front of Deque. Return true if the operation is successful. */
    public boolean insertFront(int value) {
        if(size == capacity) return false;
        Node node = new Node(value);
        node.next = head.next;
        node.next.prev = node;
        node.prev = head;
        head.next = node;
        size++;
        if(size == 1){
            tail = node;
        }
        return true;
    }
    
    /** Adds an item at the rear of Deque. Return true if the operation is successful. */
    public boolean insertLast(int value) {
        if(size == capacity) return false;
        Node node = new Node(value);
        tail.next = node;
        node.prev = tail;
        node.next = head;
        head.prev = node;
        tail=node;
        size++;
        return true;
    }
    
    /** Deletes an item from the front of Deque. Return true if the operation is successful. */
    public boolean deleteFront() {
        if(size == 0) return false;
        head.next = head.next.next;
        head.next.prev = head;
        size--;
        if(size == 0) tail = head;
        return true;
    }
    
    /** Deletes an item from the rear of Deque. Return true if the operation is successful. */
    public boolean deleteLast() {
        if(size == 0) return false;
        tail = tail.prev;
        tail.next = head;
        head.prev = tail;
        size--;
        return true;
    }
    
    /** Get the front item from the deque. */
    public int getFront() {
        if(size == 0) return -1;
        return head.next.val;
    }
    
    /** Get the last item from the deque. */
    public int getRear() {
        if(size == 0) return -1;
        return tail.val;
    }
    
    /** Checks whether the circular deque is empty or not. */
    public boolean isEmpty() {
        return size == 0;
    }
    
    /** Checks whether the circular deque is full or not. */
    public boolean isFull() {
        return size==capacity;
    }
}

/**
 * Your MyCircularDeque object will be instantiated and called as such:
 * MyCircularDeque obj = new MyCircularDeque(k);
 * boolean param_1 = obj.insertFront(value);
 * boolean param_2 = obj.insertLast(value);
 * boolean param_3 = obj.deleteFront();
 * boolean param_4 = obj.deleteLast();
 * int param_5 = obj.getFront();
 * int param_6 = obj.getRear();
 * boolean param_7 = obj.isEmpty();
 * boolean param_8 = obj.isFull();
 */
