/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val,List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/
class Solution {
    public List<List<Integer>> levelOrder(Node root) {
        Queue<Node> queue = new LinkedList<Node>();
        queue.offer(root);
        List<List<Integer>> result = new LinkedList<List<Integer>>();
        if(root == null){
            return result;
        }
        Node markEnd = root;
        Node curLast = root;
        result.add(new LinkedList<Integer>());
        while(queue.isEmpty() == false){
            Node node = queue.poll();
            result.get(result.size()-1).add(node.val);
            for(Node chi : node.children){
                curLast = chi;
                queue.offer(chi);
                
            }
            
            if(node == markEnd && queue.isEmpty() == false){
                markEnd = curLast;
                result.add(new LinkedList<Integer>());
            }
        }
        return result;
    }
}
