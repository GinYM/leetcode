/*
// Definition for a QuadTree node.
class Node {
    public boolean val;
    public boolean isLeaf;
    public Node topLeft;
    public Node topRight;
    public Node bottomLeft;
    public Node bottomRight;

    public Node() {}

    public Node(boolean _val,boolean _isLeaf,Node _topLeft,Node _topRight,Node _bottomLeft,Node _bottomRight) {
        val = _val;
        isLeaf = _isLeaf;
        topLeft = _topLeft;
        topRight = _topRight;
        bottomLeft = _bottomLeft;
        bottomRight = _bottomRight;
    }
};
*/
class Solution {
    public Node intersect(Node quadTree1, Node quadTree2) {
        if(quadTree1.isLeaf || quadTree2.isLeaf){
            if(quadTree1.isLeaf){
                if(quadTree1.val == true){
                    return quadTree1;
                }else{
                    return quadTree2;
                }
            }else{
                return quadTree2.val == true ? quadTree2:quadTree1;
            }
        }else{
            Node node = new Node();
            node.isLeaf = false;
            node.topLeft = intersect(quadTree1.topLeft, quadTree2.topLeft);
            node.topRight = intersect(quadTree1.topRight, quadTree2.topRight);
            node.bottomLeft = intersect(quadTree1.bottomLeft, quadTree2.bottomLeft);
            node.bottomRight = intersect(quadTree1.bottomRight, quadTree2.bottomRight);
            if(node.topLeft.isLeaf == true && node.topRight.isLeaf == true && node.bottomLeft.isLeaf == true &&node.bottomRight.isLeaf == true){
                if(node.topLeft.val == node.topRight.val && node.bottomLeft.val == node.bottomRight.val && node.topLeft.val == node.bottomRight.val){
                    node.isLeaf = true;
                    node.val = node.topLeft.val;
                    node.topLeft = null;
                    node.topRight = null;
                    node.bottomLeft = null;
                    node.bottomRight = null;
                }
            }
            return node;
        }
    }
}
