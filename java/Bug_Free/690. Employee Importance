/*
// Employee info
class Employee {
    // It's the unique id of each node;
    // unique id of this employee
    public int id;
    // the importance value of this employee
    public int importance;
    // the id of direct subordinates
    public List<Integer> subordinates;
};
*/
class Solution {
    public int result;
    public int getImportance(List<Employee> employees, int id) {
        //construct tree
        int prev[] = new int[2000];
        Map<Integer, Employee> tree = new HashMap<Integer, Employee>();
        
        for(Employee emp : employees){
            tree.put(emp.id, emp);
        }
        result = 0;
        dfs(tree, id);
        return result;
    }
    public void dfs(Map<Integer, Employee> tree, int idx){
        Employee emp = tree.get(idx);
        result += emp.importance;
        for(int i : emp.subordinates){
            dfs(tree,i);
        }
    }
}
