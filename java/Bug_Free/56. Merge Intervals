/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
class Solution {
    public List<Interval> merge(List<Interval> intervals) {
        Collections.sort(intervals, (a,b)->{
            return a.end-b.end;
        });
        List<Interval> result = new ArrayList<>();
        for(Interval interval : intervals){
            if(result.size() == 0 || interval.start > result.get(result.size()-1).end){
                result.add(new Interval(interval.start, interval.end));
            }else{
                Interval last = result.get(result.size()-1);
                last.end = interval.end;
                last.start = Math.min(interval.start, last.start);
                result.remove(result.size()-1);
                while(result.size()!=0 && last.start <= result.get(result.size()-1).end){
                    last.start = Math.min(last.start, result.get(result.size()-1).start);
                    result.remove(result.size()-1);
                }
                result.add(last);
            }
        }
        return result;
    }
}
