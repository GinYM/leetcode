/*
// Definition for a QuadTree node.
class Node {
    public boolean val;
    public boolean isLeaf;
    public Node topLeft;
    public Node topRight;
    public Node bottomLeft;
    public Node bottomRight;

    public Node() {}

    public Node(boolean _val,boolean _isLeaf,Node _topLeft,Node _topRight,Node _bottomLeft,Node _bottomRight) {
        val = _val;
        isLeaf = _isLeaf;
        topLeft = _topLeft;
        topRight = _topRight;
        bottomLeft = _bottomLeft;
        bottomRight = _bottomRight;
    }
};
*/
class Solution {
    public Node construct(int[][] grid) {
        int [][]sum = new int[grid.length+1][grid[0].length+1];
        int n = grid.length;
        int sumcol = 0;
        for(int i = 1;i<=n;i++){
            sumcol = 0;
            for(int j = 1;j<=n;j++){
                sumcol += grid[i-1][j-1];
                sum[i][j] = sum[i-1][j] + sumcol;
            }
        }
        return build(sum, 1,1,n,n);
        
    }
    //from (r1,c1) to (r2,c2)
    public Node build(int[][]sum, int r1,int c1, int r2, int c2){
        Node node = new Node();
        //check if all equal
        int count = sum[r2][c2] - sum[r2][c1-1]-sum[r1-1][c2] + sum[r1-1][c1-1];
        //System.out.println(count+" "+r1+" "+r2);
        if(count == 0 || count == (r2-r1+1)*(r2-r1+1) ){
            node.val = count == 0 ? false : true;
            node.isLeaf = true;
            return node;
        }
        int len = (r2-r1+1)/2;
        node.topLeft = build(sum, r1,c1,r1+len-1,c1+len-1);
        node.topRight = build(sum, r1, c1+len, r1+len-1,c2);
        node.bottomLeft = build(sum, r1+len,c1, r2, c1+len-1);
        node.bottomRight = build(sum, r1+len, c1+len, r2, c2);
        
        return node;
    }
}
