class Solution {
    List<String> result;
    public List<String> findWords(char[][] board, String[] words) {
        Trie root = new Trie();
        for(String word : words){
            build(root, word, 0);
        }
        result = new ArrayList<String>();
        int row = board.length;
        int col = board[0].length;
        for(int i = 0;i<row;i++){
            for(int j = 0;j<col;j++){
                boolean isVis[] =new boolean[row*col];
                isVis[i*col+j] = true;
                dfs(board, i, j, isVis, root.children[board[i][j]], board[i][j]+"");
            }
        }
        Collections.sort(result);
        return result;
    }
    public void build(Trie node, String word, int idx){
        if(idx == word.length()){
            node.isWord = true;
            return;
        }
        if(node.children[word.charAt(idx)] == null){
            node.children[word.charAt(idx)] = new Trie();
        }
        build(node.children[word.charAt(idx)], word, idx+1);
    }
    
    public void dfs(char[][]board, int i, int j, boolean isVis[], Trie node, String prev){
        if(node == null){
            return;
        }
        
        if(node.isWord == true && node.isSet == false){
            node.isSet = true;
            result.add(prev);
            //return;
        }
        int row = board.length;
        int col = board[0].length;
        if(i+1 < row && isVis[(i+1)*col+ j] == false){
            if(node.children[board[i+1][j]] != null){
                isVis[(i+1)*col+j] = true;
                dfs(board, i+1, j, isVis, node.children[board[i+1][j]], prev+board[i+1][j]);
                isVis[(i+1)*col+j] = false;
            }
        }
        if(i-1 >=0 && isVis[(i-1)*col+ j] == false){
            if(node.children[board[i-1][j]] != null){
                isVis[(i-1)*col+j] = true;
                dfs(board, i-1, j, isVis, node.children[board[i-1][j]], prev+board[i-1][j]);
                isVis[(i-1)*col+j] = false;
            }
        }
        if(j+1 < col && isVis[(i)*col+ j+1] == false){
            if(node.children[board[i][j+1]] != null){
                isVis[(i)*col+j+1] = true;
                dfs(board, i, j+1, isVis, node.children[board[i][j+1]], prev+board[i][j+1]);
                isVis[(i)*col+j+1] = false;
            }
        }
        if(j-1 >=0 && isVis[(i)*col+ j-1] == false){
            if(node.children[board[i][j-1]] != null){
                isVis[(i)*col+j-1] = true;
                dfs(board, i, j-1, isVis, node.children[board[i][j-1]], prev+board[i][j-1]);
                isVis[(i)*col+j-1] = false;
            }
        }
    }
    
    class Trie{
        public Trie children[];
        public boolean isWord;
        public boolean isSet;
        public Trie(){
            children = new Trie[256];
            isWord = false;
            isSet = false;
        }
    }
}
