class Solution {
    public int calculate(String s) {
        int idx = 0;
        Stack<Long> number = new Stack<Long>();
        Stack<Character> operator = new Stack<Character>();
        boolean isNeg = false;
        while(idx < s.length()){
            if(s.charAt(idx) == ' '){
                idx++;
                continue;
            }else{
                //number
                if(Character.isDigit(s.charAt(idx))){
                    long num = 0;
                    while(idx < s.length() && Character.isDigit(s.charAt(idx))){
                        num = num*10 + (s.charAt(idx)-'0');
                        idx++;
                    }
                    //if(isNeg == true)
                        number.push(num);
                    //else
                    //    number.push(num);
                    isNeg = false;
                }else{
                    // (
                    if(s.charAt(idx) == '('){
                        operator.push(s.charAt(idx));
                        isNeg = false;
                    }else if(s.charAt(idx) == ')'){
                        while(operator.isEmpty() == false && operator.peek()!='('){
                            number.push(operation(operator.pop(), number.pop(), number.pop()));
                        }
                        operator.pop();
                        
                    }else{
                        // * /
                        while(operator.isEmpty() == false && precedence(s.charAt(idx), operator.peek())){
                            number.push(operation(operator.pop(), number.pop(), number.pop()));
                        }
                        
                        operator.push(s.charAt(idx));
                        isNeg = false;
                    }
                    idx++;
                }
            }
        }
        while(operator.isEmpty() == false){
                            number.push(operation(operator.pop(), number.pop(), number.pop()));
                        }
        return number.pop().intValue();
        
    }
    
    public boolean checkIfNegative(int idx, String s){
        if(s.charAt(idx) !='-') return false;
        idx--;
        while(idx >= 0 && s.charAt(idx) == ' '){
            idx--;
        }
        if(idx <0){
            return true;
        }else{
            if(Character.isDigit(s.charAt(idx))){
                return false;
            }else{
                return true;
            }
        }
        
    }
    
    public long operation(char op, long num2, long num1){
        switch(op){
            case '+':
                return num1+num2;
            case '-':
                return num1-num2;
            case '*':
                return num1*num2;
            case '/':
                return (long)Math.floor(1.0*num1/num2);
            
        }
        return (long)0;
    }
    
    public boolean precedence(char op1, char op2){
        if(op2=='('){
            return false;
        }
        if( (op1=='*' || op1=='/' ) && (op2 == '+' || op2=='-') ){
            return false;
        }
        return true;
    }
}
