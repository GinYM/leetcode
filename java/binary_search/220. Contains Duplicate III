class Solution {
    public boolean containsNearbyAlmostDuplicate(int[] nums, int k, int t) {
        TreeMap<Long, Integer> map= new TreeMap<Long, Integer>();
        if(k <= 0 || t<0){
            return false;
        }
        for(int i = 0;i<nums.length;i++){
            if(map.size() >= k+1){
                if(map.get((long)nums[i-k-1]) == 1){
                    map.remove((long)nums[i-k-1]);
                }else{
                    map.put((long)nums[i-k-1], map.get((long)nums[i-k-1])-1);
                }
            }
            map.put((long)nums[i], map.getOrDefault((long)nums[i], 0)+1);
            
            long left =  map.ceilingKey((long)nums[i]-t);
            long right = map.floorKey((long)nums[i]+t);
            //System.out.println(left+" "+right);
            if((nums[i]!=left || (nums[i]==left && map.get((long)nums[i])!=1) ) || (nums[i]!=right || (nums[i]==right && map.get((long)nums[i])!=1) ) ){
                return true;
            }
        }
        return false;
    }
}
