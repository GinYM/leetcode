/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
class Solution {
    public int[] findRightInterval(Interval[] intervals) {
        List<int[]> store = new ArrayList<int[]>(intervals.length);
        for(int i = 0;i<intervals.length;i++){
            Interval it = intervals[i];
            store.add(new int[]{it.start, it.end, i});
        }
        Collections.sort(store, (a,b)->{
            return a[0]-b[0];
        });
        int result[] = new int[intervals.length];
        for(int i = 0;i<store.size();i++){
            // binary search
            Interval it = intervals[i];
            int key = it.end;
            int left = 0;
            int right = store.size()-1;
            int mid;
            while(left<=right){
                mid = (left+right)/2;
                if(key > store.get(mid)[0]){
                    left = mid+1;
                }else if(key < store.get(mid)[0]){
                    right = mid-1;
                }else{
                    left = mid;
                    
                    break;
                }
            }
            if(left == store.size()){
                result[i] = -1;
            }else{
                result[i] = store.get(left)[2];
            }
            
        }
        return result;
        
    }
}
