class Solution {
    public String frequencySort(String s) {
        if(s.length() == 0){
            return "";
        }
        Map<Character, Integer> map = new HashMap<Character, Integer>();
        for(int i = 0; i<s.length(); i++){
            if(map.containsKey(s.charAt(i))){
                map.put(s.charAt(i), map.get(s.charAt(i)) + 1);
            }else{
                map.put(s.charAt(i), 1);
            }
        }
        PriorityQueue<Map.Entry<Character, Integer>> queue = new PriorityQueue<Map.Entry<Character, Integer>>(map.size(), new Comparator< Map.Entry<Character, Integer> >(){
            public int compare(Map.Entry<Character, Integer> o1, Map.Entry<Character, Integer> o2){
                return o2.getValue() - o1.getValue();     
            }
        });
        for(Map.Entry<Character, Integer> entry : map.entrySet()){
            queue.add(entry);
        }
        StringBuilder sb = new StringBuilder();
        while(!queue.isEmpty()){
            Map.Entry<Character, Integer> e = queue.poll();
            for(int i = 0;i<e.getValue(); i++){
                sb.append(e.getKey());
            }
        }
        return sb.toString();
    }
    
}
