/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        ListNode head = new ListNode(-1);
        ListNode cur = head;
        Queue<ListNode> queue = new PriorityQueue<ListNode>(new NodeCmp());
        for(int i = 0; i< lists.length;i++){
            if(lists[i]!=null){
                queue.offer(lists[i]);
            }
            
        }
        while(!queue.isEmpty()){
            ListNode node = queue.poll();
            cur.next = node;
            cur = node;
            if(node.next != null){
                queue.offer(node.next);
            }
            
        }
        return head.next;
    }
    class NodeCmp implements Comparator<ListNode>{
        @Override
        public int compare(ListNode o1, ListNode o2){
            return o1.val-o2.val;
        }
        
        
    }
}