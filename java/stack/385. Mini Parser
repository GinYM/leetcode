/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * public interface NestedInteger {
 *     // Constructor initializes an empty nested list.
 *     public NestedInteger();
 *
 *     // Constructor initializes a single integer.
 *     public NestedInteger(int value);
 *
 *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
 *     public boolean isInteger();
 *
 *     // @return the single integer that this NestedInteger holds, if it holds a single integer
 *     // Return null if this NestedInteger holds a nested list
 *     public Integer getInteger();
 *
 *     // Set this NestedInteger to hold a single integer.
 *     public void setInteger(int value);
 *
 *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.
 *     public void add(NestedInteger ni);
 *
 *     // @return the nested list that this NestedInteger holds, if it holds a nested list
 *     // Return null if this NestedInteger holds a single integer
 *     public List<NestedInteger> getList();
 * }
 */
class Solution {
    public NestedInteger deserialize(String s) {
        Stack<NestedInteger> stack = new Stack<NestedInteger>();
        int idx = 0;
        NestedInteger result = new NestedInteger();
        stack.push(new NestedInteger());
        while(idx < s.length()){
            if(s.charAt(idx) == '['){
                NestedInteger integer = new NestedInteger();
                stack.peek().add(integer);
                stack.push(integer);
                idx++;
            }else if(s.charAt(idx) == '-' || Character.isDigit(s.charAt(idx))){
                int num = 0;
                int sign = 1;
                if(s.charAt(idx) == '-'){
                    sign = -1;
                    idx++;
                }
                while(idx < s.length() && Character.isDigit(s.charAt(idx))){
                    num = num*10 + (s.charAt(idx)-'0');
                    idx++;
                }
                stack.peek().add(new NestedInteger(sign*num));
            }else if(s.charAt(idx) == ']'){
                result = stack.pop();
                idx++;
            }else{
                idx++;
            }
        }
        //result = stack.pop();
        result = stack.pop().getList().get(0);
        return result;
    }
}
