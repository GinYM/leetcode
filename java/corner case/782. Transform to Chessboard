class Solution {
    public int movesToChessboard(int[][] board) {
        int n = board.length;
        int m = board[0].length;
        int count = 0;
        boolean isSame = true;
        int result = 0;
        int countSame = 1;
        int countNS = 0;
        for(int i = 1;i<n;i++){
            isSame = !isSame;
            boolean allSame = board[i][0] == board[0][0];
            for(int j=0;j<m;j++){
                if((board[i][j] == board[0][j]) != allSame ){
                    return -1;
                }
            }
            if(allSame == true){
                countSame++;
            }else{
                countNS++;
            }
            if(isSame != allSame){
                count++;
            }
        }
        if((count%2!=0 && (n-count)%2!=0) || Math.abs(countSame-countNS) >= 2) return -1;
        
        if(count%2 == 0 && (n-count)%2 == 0){
            result += Math.min(count/2, (n-count)/2);
        }else if(count%2 == 0){
            result += count/2;
        }else{
            result += (n-count)/2;
        }
        
        isSame = true;
        count = 0;
        
        countSame= 1;
        countNS = 0;
        
        for(int i = 1;i<m;i++){
            isSame = !isSame;
            boolean allSame = board[0][i] == board[0][0];
            for(int j=0;j<n;j++){
                if((board[j][i] == board[j][0]) != allSame ){
                    return -1;
                }
            }
            if(isSame != allSame){
                count++;
            }
            if(allSame == true){
                countSame++;
            }else{
                countNS++;
            }
        }
        
        
        if((count%2!=0 && (m-count)%2!=0) || Math.abs(countSame-countNS) >= 2) return -1;
        
        if(count%2 == 0 && (m-count)%2 == 0){
            result += Math.min(count/2, (m-count)/2);
        }else if(count%2 == 0){
            result += count/2;
        }else{
            result += (m-count)/2;
        }
        
        return result;
        
    }
    
}
