class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int k = (nums1.length + nums2.length+1)/2;
        int start1 = 0, start2 = 0;
        double result = 0;
        int l1 = 0, l2 = 0;
        while(k>0 && start1 < nums1.length && start2 < nums2.length){
            
            if(k == 1){
                if(nums1[start1] < nums2[start2]){
                    result = nums1[start1];
                    start1++;
                }else{
                    result = nums2[start2];
                    start2++;
                }
                k=0;
                break;
            }
            
            l1 = k/2 + start1 -1< nums1.length?k/2+start1-1:nums1.length-1;
            l2 = k-(k/2) + start2 -1< nums2.length?k-(k/2)+start2-1:nums2.length-1;
            
            
            if(nums1[l1] > nums2[l2]){
                k -= l2-start2 + 1;
                start2 = l2+1;
            }else if(nums1[l1] < nums2[l2]){
                k -= l1-start1 + 1;
                start1 = l1 + 1;
            }else{
                k -= l2-start2+1;
                k -= l1-start1+1;
                //k = 0;
                result = nums1[l1];
                start1 = l1+1;
                start2 = l2+1;
                
                break;
            }
            
        }
        //System.out.println(start1+" "+start2+" "+k);
        int total = nums1.length + nums2.length;
        if(start1 == nums1.length || start2 == nums2.length){
            
            if(total%2 != 0){
                if(k == 0){
                    return result;
                }else{
                    result = start1 == nums1.length?nums2[start2+k-1]:nums1[start1+k-1];    
                }
                
            }else{
                if(k == 0){
                    result += start1 == nums1.length?nums2[start2]:nums1[start1];
                    result /= 2.0;
                }else{
                    //System.out.println(start1+" "+k);
                    result = start1 == nums1.length?(nums2[start2+k-1]+(double)nums2[start2+k])/2:(nums1[start1+k-1]+(double)nums1[start1+k])/2;
                }
                
            }
            return result;
        }else{
            if(total%2 != 0){
                return result;
            }else{
                if(start1 == nums1.length){
                    result += nums2[start2];
                }else if(start2 == nums2.length){
                    result += nums1[start1];
                }else{
                    result += nums1[start1] < nums2[start2] ? nums1[start1]:nums2[start2];
                }
                return (double)result/2.0;
            }
        }
        
    }
}
