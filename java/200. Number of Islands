class Solution {
    public int numIslands(char[][] grid) {
        if(grid == null || grid.length == 0 || grid[0].length == 0){
            return 0;
        }
        int row = grid.length;
        int col = grid[0].length;
        int [][]store = new int[row][col];
        int count = 0;
        for(int i=0;i<row;i++){
            for(int j = 0;j<col;j++){
                store[i][j] = -1;
            }
        }
        for(int i = 0;i<row;i++){
            for(int j = 0;j<col;j++){
                if(grid[i][j] == '0'){
                    store[i][j] = 0;
                    
                }
                else if(store[i][j] == -1 && grid[i][j] == '1'){
                    fill(grid, store, i, j, ++count);
                }
            }
        }
        return count;
    }
    private void fill(char[][]grid, int[][]store, int i, int j, int count){
        if(store[i][j] != -1){
            return;
        }
        store[i][j] = count;
        int row = grid.length;
        int col = grid[0].length;
        if(i+1 < row && grid[i+1][j] == '1'){
            fill(grid, store, i+1, j, count);
        }
        if(j+1 < col && grid[i][j+1] == '1'){
            fill(grid, store, i, j+1, count);
        }
        if(j-1 >=0 && grid[i][j-1] == '1'){
            fill(grid, store, i, j-1, count);
        }
        if(i-1 >=0  && grid[i-1][j] == '1'){
            fill(grid, store, i-1, j, count);
        }
    }
}
