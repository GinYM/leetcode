class Solution {
    public int maximalSquare(char[][] matrix) {
        if(matrix == null || matrix.length == 0 || matrix[0].length == 0){
            return 0;
        }
        int row = matrix.length;
        int col = matrix[0].length;
        int []dp = new int[col];
        for(int i = 0;i<col;i++){
            dp[i] = 0;
        }
        Stack<Integer> stack;
        int maxArea = 0;
        int area = 0;
        for(int i = 0;i<row;i++){
            stack = new Stack<Integer>();
            for(int j = 0;j<col;j++){
                if(matrix[i][j] == '1'){
                    dp[j]++;
                }else{
                    dp[j] = 0;
                }
                while(!stack.empty() && dp[stack.peek()]>=dp[j]){
                    int idx = stack.pop();
                    int len = Math.min(dp[idx], j-1 - (stack.empty()?0:stack.peek()+1) + 1);
                    maxArea = len*len > maxArea ? len*len:maxArea;
                }
                stack.push(j);
            }
            int pkIdx = (stack.empty()?0:stack.peek());
            while(!stack.empty()){
                int idx = stack.pop();
                int len = Math.min(dp[idx], pkIdx - (stack.empty()?0:stack.peek()+1) + 1);
                maxArea = len*len > maxArea ? len*len:maxArea;
                //System.out.println(maxArea);
            }
        }
        return maxArea;
    }
}