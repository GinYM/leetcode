class Solution {
    public int maxProfit(int[] prices) {
        int dp[][][] = new int[prices.length+1][][];
        dp[0] = new int[2][];
        for(int i = 0;i<2;i++){
            dp[0][i] = new int[2];
            for(int j = 0;j<2;j++){
                dp[0][i][j] = Integer.MIN_VALUE;
            }
        }
        for(int i = 0;i<prices.length;i++){
            dp[i+1] = new int[2][];
            dp[i+1][0] = new int[2];
            dp[i+1][1] = new int[2];
            dp[i+1][0][0] = Math.max(dp[i][0][0], -prices[i]); // first buy
            dp[i+1][0][1] = Math.max(dp[i][0][1], dp[i][1][0] == Integer.MIN_VALUE?Integer.MIN_VALUE:dp[i][1][0]-prices[i]); // second buy
            dp[i+1][1][0] = Math.max(dp[i][0][0]==Integer.MIN_VALUE?Integer.MIN_VALUE:dp[i][0][0]+prices[i], dp[i][1][0]); //first sell
            dp[i+1][1][1] = Math.max(dp[i][1][1], dp[i][0][1]==Integer.MIN_VALUE?Integer.MIN_VALUE:dp[i][0][1] + prices[i]); //second sell
        }
        return Math.max(0,Math.max(dp[prices.length][1][0], dp[prices.length][1][1]));
    }
}
