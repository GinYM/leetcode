/*
//2D array
class Solution {
    public int minDistance(String word1, String word2) {
        int m = word1.length();
        int n = word2.length();
        int dp[][] = new int[m+1][n+1];
        for(int i = 0;i<=m;i++){
            for(int j = 0;j<=n;j++){
                if(i == 0){
                    dp[i][j] = j;
                }else if(j == 0){
                    dp[i][j] = i;
                }else{
                    if(word1.charAt(i-1) == word2.charAt(j-1)){
                        dp[i][j] = dp[i-1][j-1];
                    }else{
                        dp[i][j] = Math.min(Math.min(dp[i-1][j]+1, dp[i][j-1]+1), dp[i-1][j-1]+1);
                    }
                }
            }
        }
        return dp[m][n];
    }
}
*/

//1D array
class Solution {
    public int minDistance(String word1, String word2) {
        int m = word1.length();
        int n = word2.length();
        int dp[] = new int[m+1];
        int prev = 0;
        int tmpPrev = 0;
        for(int i = 0;i<=m;i++){
            dp[i] = i;
        }
        //prev means dp[i-1][j-1]
        for(int j = 1;j<= n;j++){
            for(int i = 0;i<=m;i++){
                tmpPrev = dp[i];
                if(i == 0){
                    dp[i] = j;
                }else{
                    if(word1.charAt(i-1) == word2.charAt(j-1)){
                        dp[i] = prev;
                    }else{
                        dp[i] = Math.min(Math.min(dp[i-1]+1, dp[i]+1), prev+1);
                    }
                }
                prev = tmpPrev;
            }
        }
        return dp[m];
    }
}