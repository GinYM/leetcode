class Solution {
    public List<Integer> largestDivisibleSubset(int[] nums) {
        List<Integer>result = new ArrayList<Integer>();
        if(nums == null || nums.length == 0){
            return result;
        }
        Arrays.sort(nums);
        int prev[] = new int[nums.length];
        int dp[] = new int[nums.length];
        int maxIdx = 0;
        int maxLen = 0;
        for(int i = 0;i<nums.length;i++){
            prev[i] = -1;
            for(int j = i-1;j>=0;j--){
                if(nums[i]%nums[j] == 0){
                    if(dp[j] + 1 > dp[i]){
                        dp[i] = dp[j]+1;
                        prev[i] = j;
                    }
                }
            }
            if(dp[i] > maxLen){
                maxLen = dp[i];
                maxIdx = i;
            }
        }
        
        while(maxIdx != -1){
            result.add(nums[maxIdx]);
            maxIdx = prev[maxIdx];
        }
        if(result.size() == 0){
            result.add(nums[0]);
        }
        return result;
    }
}
