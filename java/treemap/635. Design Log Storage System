class LogSystem {
    public TreeMap<String, Set<Integer>> log;
    //Year:Month:Day:Hour:Minute:Second
    public static String zeroTimeStamp = "0000:00:00:00:00:00";
    public static String maxTimeStamp =  "9999:12:31:23:59:59";
    //granularity to index in zeroTimeStamp;
    public Map<String, Integer> gra2idx;
    public LogSystem() {
        log = new TreeMap<String, Set<Integer>>();
        gra2idx = new HashMap<String, Integer>();
        gra2idx.put("Year", 4);
        gra2idx.put("Month", 7);
        gra2idx.put("Day", 10);
        gra2idx.put("Hour", 13);
        gra2idx.put("Minute", 16);
        gra2idx.put("Second", 19);
    }
    
    public void put(int id, String timestamp) {
        if(log.containsKey(timestamp) == false){
            log.put(timestamp, new HashSet<Integer>());
        }
        log.get(timestamp).add(id);
    }
    
    public List<Integer> retrieve(String s, String e, String gra) {
        StringBuilder start = new StringBuilder(), end = new StringBuilder();
        
        start.append(s.substring(0,gra2idx.get(gra)));
        start.append(zeroTimeStamp.substring(gra2idx.get(gra),
                                          zeroTimeStamp.length()));
        
        end.append(e.substring(0,gra2idx.get(gra)));
        end.append(maxTimeStamp.substring(gra2idx.get(gra),
                                          maxTimeStamp.length()));
        
        
       
        
        
        List<Integer> result = new ArrayList<Integer>();
        Map<String, Set<Integer>> ret = log.subMap(start.toString(),
                                                   end.toString());
        for(String ts : ret.keySet()){
            result.addAll(ret.get(ts));
        }
        if(log.containsKey(end.toString())){
            result.addAll(log.get(end.toString()));
        }
        return result;
        
    }
}

/**
 * Your LogSystem object will be instantiated and called as such:
 * LogSystem obj = new LogSystem();
 * obj.put(id,timestamp);
 * List<Integer> param_2 = obj.retrieve(s,e,gra);
 */
