/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
class SummaryRanges {
    TreeMap<Integer, Interval> map;
    /** Initialize your data structure here. */
    public SummaryRanges() {
        map = new TreeMap<Integer, Interval>();
    }
    
    public void addNum(int val) {
        if(map.containsKey(val)){
            return;
        }
        Integer low = map.lowerKey(val);
        Integer high = map.higherKey(val);
        Interval lo,hi;
        
        if(low==null && high == null){
            map.put(val, new Interval(val, val));
        }else if(low == null){
            hi = map.get(high);
            if(val >= hi.start-1){
                hi.start = Math.min(val,hi.start);
            }else{
                map.put(val, new Interval(val, val));
            }
        }else if(high == null){
            lo = map.get(low);
            if(val <= lo.end+1){
                lo.end = Math.max(val, lo.end);
            }else{
                map.put(val, new Interval(val, val));
            }
        }else{
            lo = map.get(low);
            hi = map.get(high);
            if(val == lo.end+1 && val == hi.start-1){
                lo.end = hi.end;
                map.remove(high);
            }else if(val <= lo.end+1){
                lo.end = Math.max(val, lo.end);
            }else if(val >= hi.start-1){
                hi.start = Math.min(val, hi.start);
            }else{
                map.put(val, new Interval(val, val));
            }
        }
    }
    
    public List<Interval> getIntervals() {
        return new ArrayList<Interval>(map.values());
    }
}

/**
 * Your SummaryRanges object will be instantiated and called as such:
 * SummaryRanges obj = new SummaryRanges();
 * obj.addNum(val);
 * List<Interval> param_2 = obj.getIntervals();
 */
