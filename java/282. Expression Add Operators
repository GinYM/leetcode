class Solution {
    public List<String> addOperators(String num, int target) {
        return dfs(num, "", target, 0);
    }
    
    //check whether we can add 0
    private boolean check(String str){
        int idx = str.length()-1;
        while(idx >=0 && str.charAt(idx) == '0'){
            idx--;
        }
        if(idx <0){
            return false;
        }else{
            if(idx == str.length()-1 ){
                return true;
            }else{
                if(str.charAt(idx) > '0' && str.charAt(idx) < '9'){
                    return true;
                }else{
                    return false;
                }
            }
        }
        
    }
    
    private List<String> dfs(String num, String prev, int target, int idx){
        List<String> str = new ArrayList<String>();
        if(idx >= num.length()){
            if(parse(prev) == target){
                str.add(prev);
            }
            return str;
        }
        List<String>str1;
        
        if(prev != ""){
            if(check(prev)){
                str1 = dfs(num, prev+""+num.charAt(idx), target, idx+1);
                str.addAll(str1);
            }
            str1 = dfs(num, prev+"+"+num.charAt(idx), target, idx+1);
            str.addAll(str1);
            str1 = dfs(num, prev+"-"+num.charAt(idx), target, idx+1);
            str.addAll(str1);
            str1 = dfs(num, prev+"*"+num.charAt(idx), target, idx+1);
            str.addAll(str1);
        }else{
            str1 = dfs(num, ""+num.charAt(idx), target, idx+1);
            str.addAll(str1);
        }
        
        return str;
    }
    private long parse(String str){
        //System.out.println(str);
        Stack<Long> number = new Stack<Long>();
        Stack<Character> sign = new Stack<Character>();
        long num = 0;
        long calc1, calc2;
        char s;
        for(int i = 0;i<str.length();i++){
            if(str.charAt(i) >= '0' && str.charAt(i) <= '9'){
                num = num*10+ (int)(str.charAt(i) - '0');
            }else{
                number.push(num);
                num = 0;
                if(str.charAt(i) == '*'){
                    sign.push(str.charAt(i));
                }else{
                    if(sign.isEmpty()){
                        sign.push(str.charAt(i));
                    }else{
                        while(sign.isEmpty() == false){
                            calc1 = number.pop();
                            calc2 = number.pop();
                            s = sign.pop();
                            switch (s){
                                case '*':
                                    number.push(calc1*calc2);
                                    break;
                                case '+':
                                    number.push(calc1+calc2);
                                    break;
                                case '-':
                                    number.push(calc2-calc1);
                                    break;
                            }
                            
                        }
                        sign.push(str.charAt(i));
                    }
                }
            }
        }
        number.push(num);
        
        while(sign.isEmpty() == false){
            calc1 = number.pop();
            calc2 = number.pop();
            s = sign.pop();
            switch (s){
                case '*':
                    number.push(calc1*calc2);
                    break;
                case '+':
                    number.push(calc1+calc2);
                    break;
                case '-':
                    number.push(calc2-calc1);
                    break;
            }
        }
        return number.pop();
    }
    
}
