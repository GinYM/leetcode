/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class BSTIterator {
public:
    stack<TreeNode*>iter;
    BSTIterator(TreeNode *root) {
        
        TreeNode * cur = root;
        while(cur!=NULL)
        {
            iter.push(cur);
            cur = cur->left;
        }
    }

    /** @return whether we have a next smallest number */
    bool hasNext() {
        return !iter.empty();
    }

    /** @return the next smallest number */
    int next() {
        int num = iter.top()->val;
        TreeNode* tmp = iter.top();
        iter.pop();
        TreeNode*cur = tmp->right;
        while(cur!=NULL)
        {
            iter.push(cur);
            cur = cur->left;
        }
        return num;
    }
};

/**
 * Your BSTIterator will be called like this:
 * BSTIterator i = BSTIterator(root);
 * while (i.hasNext()) cout << i.next();
 */
