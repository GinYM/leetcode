class Solution {
    Map<Integer, Boolean> map;
    public boolean canIWin(int maxChoosableInteger, int desiredTotal) {
        if(maxChoosableInteger >= desiredTotal){
            return true;
        }
        if((1+maxChoosableInteger)*maxChoosableInteger/2 < desiredTotal){
            return false;
        }
        if(desiredTotal == 0){
            return true;
        }
        map = new HashMap<>();
        
        return canWinHelper(0, desiredTotal, maxChoosableInteger);
    }
    
    public boolean canWinHelper(int left, int desiredScore, int maxChoo){
        if(desiredScore <= 0){
            return false;
        }
        if(map.containsKey(left)){
            return map.get(left);
        }
        
        boolean canWin = false;
        
        for(int i = maxChoo-1;i>=0;i--){
            
            int mask = 1<<i;
            if((left&mask) != 0 ){
                continue;
            }
            
            if(canWinHelper(left|mask, desiredScore-i-1, maxChoo) == false){
                canWin = true;
                break;
            }
        }
        map.put(left, canWin);
        return canWin;
        
    }
}
