class Solution {
    public double mincostToHireWorkers(int[] quality, int[] wage, int K) {
        List<double[]> workers = new ArrayList<double[]>(quality.length);
        for(int i = 0;i<quality.length;i++){
            workers.add(new double[]{1.0*wage[i]/quality[i], (double)quality[i]});
        }
        Collections.sort(workers, (a,b)->{
            return Double.compare(a[0],b[0]); 
        });
        PriorityQueue<Double> queue = new PriorityQueue<Double>((a,b)->{
            return Double.compare(b,a);
        });
        double qsum = 0.0;
        double result = Double.MAX_VALUE;
        for(double[] worker : workers){
            qsum += worker[1];
            queue.offer(worker[1]);
            if(queue.size() > K){
                double maxq = queue.poll();
                qsum -=maxq;
            }
            if(queue.size()==K){
                result = Math.min(result, worker[0]*qsum);
            }
            
        }
        return result;
        
    }
}
