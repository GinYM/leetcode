/**
 * // This is the robot's control interface.
 * // You should not implement it, or speculate about its implementation
 * interface Robot {
 *     // Returns true if the cell in front is open and robot moves into the cell.
 *     // Returns false if the cell in front is blocked and robot stays in the current cell.
 *     public boolean move();
 *
 *     // Robot will stay in the same cell after calling turnLeft/turnRight.
 *     // Each turn will be 90 degrees.
 *     public void turnLeft();
 *     public void turnRight();
 *
 *     // Clean the current cell.
 *     public void clean();
 * }
 */
class Solution {
    public void cleanRoom(Robot robot) {
        Set<String> isVis = new HashSet<>();
        backTrack(robot, isVis, 0,0,0);
    }
    
    public void backTrack(Robot robot, Set<String> isVis, int i, int j, int dir){
        robot.clean();
        for(int d = 0;d<4;d++){
            int r = i;
            int c = j;
            switch(dir){
                // forward
                case 0:
                    r--;
                    break;
                // right
                case 90:
                    c++;
                    break;
                case 180:
                    r++;
                    break;
                case 270:
                    c--;
                    break;
            }
            String direction = i+" "+j+"->"+dir;
            
            if(isVis.contains(direction)){
                robot.turnRight();
                continue;
            }
            isVis.add(direction);
            if(robot.move()){
                backTrack(robot, isVis, r, c, dir);
                robot.turnRight();
                robot.turnRight();
                robot.move();
                robot.turnRight();
                robot.turnRight();
            }
            robot.turnRight();
            dir = (dir+90)%360;
        }
    }
}
