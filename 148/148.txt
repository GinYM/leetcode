/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* sortList(ListNode* head) {
        int len = 0;
        ListNode* tmp = head;
        ListNode*left;
        ListNode*tail;
        ListNode*right;
        ListNode*cur;
        ListNode dump = ListNode(0);
        dump.next=head;
        while(tmp!=NULL)
        {
            len++;
            tmp = tmp->next;
        }
        
        for(int step=1;step<len;step<<=1)
        {
            left = dump.next;
            tail=&dump;
            
            while(left!=NULL)
            {
                right = getNext(left,step);
                if(right != NULL)
                {
                    
                    tmp = getNext(right,step);
                    tail=merge(left,right,tail);
                    tail->next=tmp;
                    left=tmp;
                }
                else
                {
                    break;
                }
                
            }
        }
        return dump.next;
    }
private:
    ListNode* getNext(ListNode*head,int step)
    {
        ListNode*left = head;
        for(int i = 0;i<step-1 && left!=NULL;i++)
        {
            left = left->next;
        }
        if(left == NULL)
        {
            return NULL;
        }
        ListNode*right = left->next;
        left->next = NULL;
        
        return right;
    }
    ListNode* merge(ListNode*l1,ListNode*l2,ListNode*cur)
    {
        while(l1!=NULL && l2!=NULL)
        {
            if(l1->val > l2->val)
            {
                cur->next=l2;
                l2 = l2->next;
            }
            else
            {
                cur->next = l1;
                l1 = l1->next;
            }
            cur=cur->next;
        }
        cur->next=l1?l1:l2;
        while(cur->next != NULL)
        {
            cur = cur->next;
        }
        return cur;
    }
};
